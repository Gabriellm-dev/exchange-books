datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Usuario {
  id                   Int        @id @default(autoincrement())
  nome                 String
  email                String     @unique
  senha                String
  rua                  String?
  numero               String?
  bairro               String?
  cidade               String
  estado               String
  cep                  String
  dataCadastro         DateTime @default(now())
  descricao            String?
  reputacao            Reputacao? @relation(fields: [reputacaoId], references: [id])
  reputacaoId          Int?
  livros               Livro[]
  avaliacoesEnviadas   Avaliacao[] @relation("AvaliacoesEnviadas")
  avaliacoesRecebidas  Avaliacao[] @relation("AvaliacoesRecebidas")
  solicitacoesEnviadas Troca[] @relation("Solicitante")
  solicitacoesRecebidas Troca[] @relation("Solicitado")
}

model Livro {
  id                   Int     @id @default(autoincrement())
  titulo               String
  autor                String
  genero               String
  estadoDeConservacao  String
  descricao            String?
  dataPublicacao       DateTime?
  numEdicao            String?
  disponivel           Boolean @default(true)
  usuario              Usuario @relation(fields: [usuarioId], references: [id])
  usuarioId            Int
  trocasSolicitadas    Troca[] @relation("LivroSolicitado")
  trocasOferecidas     Troca[] @relation("LivroOferecido")
}

model Troca {
  id                 Int     @id @default(autoincrement())
  data               DateTime @default(now())
  solicitante        Usuario  @relation("Solicitante", fields: [solicitanteId], references: [id])
  solicitanteId      Int
  solicitado         Usuario  @relation("Solicitado", fields: [solicitadoId], references: [id])
  solicitadoId       Int
  livroSolicitado    Livro    @relation("LivroSolicitado", fields: [livroSolicitadoId], references: [id])
  livroSolicitadoId  Int
  livroOferecido     Livro    @relation("LivroOferecido", fields: [livroOferecidoId], references: [id])
  livroOferecidoId   Int
  estado             String
  avaliacaoLivro     String?
  trocaAutorizada    Boolean @default(false)
  trocaSolicitada    Boolean @default(true)
  classificacaoLivro ClassificacaoLivro? @relation(fields: [classificacaoLivroId], references: [id])
  classificacaoLivroId Int?
  avaliacoes         Avaliacao[]
}

model Avaliacao {
  id          Int     @id @default(autoincrement())
  nota        Int
  comentario  String?
  data        DateTime @default(now())
  avaliador   Usuario @relation("AvaliacoesEnviadas", fields: [avaliadorId], references: [id])
  avaliadorId Int
  troca       Troca   @relation(fields: [trocaId], references: [id])
  trocaId     Int
  avaliado    Usuario @relation("AvaliacoesRecebidas", fields: [avaliadoId], references: [id])
  avaliadoId  Int
}

model ClassificacaoLivro {
  id     Int     @id @default(autoincrement())
  nivel  String
  trocas Troca[]
}

model Reputacao {
  id       Int       @id @default(autoincrement())
  nivel    String
  usuarios Usuario[]
}
